// src/Joystick.lf
target CCpp {
    cmake-include: "include/composition.cmake"
};

preamble {=
    #include "joy-ctrl.h"
=}

reactor Joystick {
    // Instantiate the publisher node as a sate variable
    state joystick_node : std::shared_ptr<DeepRacerJoyControl>;
    output servo_msg:std::shared_ptr<deepracer_interfaces_pkg::msg::ServoCtrlMsg>;
    timer t(0, 5 ms);

    state count_ : size_t;
    state JOYSTICK_DEV : std::string;
    state data : ControllerData;
    state joystick_fd : int;
    state num_of_axis : int;
    state num_of_buttons : int;
    state name_of_joystick : char[80];

    reaction(startup) {=
        // Initialize rclcpp
        rclcpp::init(0, NULL);
        self->joystick_node = std::make_shared<DeepRacerJoyControl>();

        self->JOYSTICK_DEV = "/dev/input/js0";
        self->count_ = 0;

        self->joystick_fd = open(self->JOYSTICK_DEV.c_str(), O_RDONLY | O_NONBLOCK);
        if (self->joystick_fd < 0) 
        {
            RCLCPP_INFO(self->joystick_node->get_logger(), "Joystick error: %d", self->joystick_fd); 
            exit(1);
        }

        ioctl(self->joystick_fd, JSIOCGAXES, &(self->num_of_axis));
        ioctl(self->joystick_fd, JSIOCGBUTTONS, &(self->num_of_buttons));
        ioctl(self->joystick_fd, JSIOCGNAME(80), &(self->name_of_joystick));
    
        self->data.joy_button.resize(self->num_of_buttons, 0);
        self->data.joy_axis.resize(self->num_of_axis, 0);

        RCLCPP_INFO(self->joystick_node->get_logger(), "Joystick Connected: %s", self->name_of_joystick);
        RCLCPP_INFO(self->joystick_node->get_logger(), "Joystick Number of Axes: %d", self->num_of_axis);
        RCLCPP_INFO(self->joystick_node->get_logger(), "Joystick Number of Buttons: %d", self->num_of_buttons);
    =}

    reaction(t) -> servo_msg {=
        self->count_++;
        js_event js;
        read(self->joystick_fd, &js, sizeof(js_event));

        switch (js.type & ~JS_EVENT_INIT)
        {
        case JS_EVENT_AXIS:
            if(!((int)js.number>=self->data.joy_axis.size()))
            self->data.joy_axis[(int)js.number]= js.value;
            break;
        case JS_EVENT_BUTTON:
            if(!((int)js.number>=self->data.joy_button.size()))
            self->data.joy_button[(int)js.number]= js.value;
            break;
        }
        
        std::shared_ptr<deepracer_interfaces_pkg::msg::ServoCtrlMsg> servoMsg = std::make_shared<deepracer_interfaces_pkg::msg::ServoCtrlMsg>();  
        servoMsg->angle = -(static_cast<float>(self->data.joy_axis[0])/INT16_MAX);
        servoMsg->throttle = -(static_cast<float>(self->data.joy_axis[1])/INT16_MAX); 
        RCLCPP_INFO(self->joystick_node->get_logger(), "Active Angle: '%f'", servoMsg->angle); 
        RCLCPP_INFO(self->joystick_node->get_logger(), "Active Throttle: '%f'", servoMsg->throttle); 
        lf_set(servo_msg, servoMsg);
    =}

    reaction(shutdown) {=
        rclcpp::shutdown();
    =}
}